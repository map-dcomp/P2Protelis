import org.gradle.internal.os.OperatingSystem

buildscript {
  repositories {
      mavenCentral()
      jcenter()
  }
  dependencies {
    classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.7.1"
  }
}

// Plugins
plugins {
    id 'java-library'
    id 'maven'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'checkstyle'
    id "com.github.ben-manes.versions" version "0.21.0"
    // breaks downstream multi-project builds id "org.protelis.protelisdoc" version "0.2.0"
}

// this bit of code allows P2Protelis to be included in a multi-project build and still build on it's own
// Example code is from https://discuss.gradle.org/t/error-plugin-already-on-the-classpath-must-not-include-a-version/31814/3
def spotbugsPluginId = 'com.github.spotbugs'
final hasPlugin = project.getPlugins().hasPlugin(spotbugsPluginId);
if (hasPlugin) {
    final Plugin plugin = project.getPlugins().getPlugin(spotbugsPluginId)
    println 'Spotbugs plugin already applied'
} else {
    apply plugin: "com.github.spotbugs"
}

def props = new Properties()
file("gradle.properties").withInputStream { props.load(it) }

group = 'com.bbn.protelis'
version = props.getProperty('p2protelis_version')

description = """Protelis Testbed"""

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

repositories {
  // local repository first
  mavenLocal()
  
  jcenter()
}

ext {
    spotbugs_version = '3.1.12'
}

dependencies {
    api group: 'com.cedarsoftware', name: 'json-io', version:'4.10.1'
    api group: 'com.google.guava', name: 'guava', version: props.getProperty('guava_version')
    api(group: 'org.protelis', name: 'protelis', version:'13.3.8') {
        exclude module: 'guava'
    }
    api group: 'commons-cli', name: 'commons-cli', version: props.getProperty('commons_cli_version')
    api group: 'net.sf.jung', name: 'jung-graph-impl', version: props.getProperty('jung_version')
    api group: 'net.sf.jung', name: 'jung-algorithms', version: props.getProperty('jung_version')
    api group: 'net.sf.jung', name: 'jung-visualization', version: props.getProperty('jung_version')
    api group: 'org.slf4j', name: 'slf4j-api', version: props.getProperty('slf4j_version')
    runtimeOnly group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: props.getProperty("log4j_version")
    api group: 'org.apache.logging.log4j', name: 'log4j-api', version: props.getProperty("log4j_version")
    api group: 'org.apache.logging.log4j', name: 'log4j-core', version: props.getProperty("log4j_version")
    testImplementation( group: 'junit', name: 'junit', version: props.getProperty("junit_version")) {
        exclude module: 'hamcrest-core'
    }
    testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: props.getProperty("hamcrest_version")
    
    api group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: props.getProperty('jackson_version')
    api group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-guava', version: props.getProperty('jackson_version')
    api group: 'com.fasterxml.jackson.module', name: 'jackson-module-parameter-names', version: props.getProperty('jackson_version')
    api group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: props.getProperty('jackson_version')
    api group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: props.getProperty('jackson_version')
    
    api group: 'dnsjava', name: 'dnsjava', version: props.getProperty('dnsjava_version')
    
    api(group: "org.danilopianini", name: "javalib", version: "5.0.0") {
        exclude group: 'org.ow2.asm', module: 'asm-debug-all'
    }
                                                                           
    api group: "org.apache.commons", name: "commons-lang3", version: "3.8.1"
    
    api group: "de.ruedigermoeller", name: "fst", version: "2.57"
}

eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = true
    }
}

checkstyle {
    config = resources.text.fromFile('style.xml', 'UTF-8')
    showViolations = true
    ignoreFailures = false
    toolVersion = "8.10"
}

test {
    ignoreFailures Boolean.getBoolean("test.ignoreFailures")   
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }
}

spotbugs {
    toolVersion = project.spotbugs_version
    ignoreFailures = true
}
    
// breaks downstream multi-project builds
/* 
Protelis2KotlinDoc {
    baseDir.set("${project.projectDir}/src/main/resources/protelis") // base dir from which recursively looking for .pt files
    // destDir.set("${project.buildDir.path}/protelis-docs/") // output dir for docs
    // kotlinVersion.set("+")
    // protelisVersion.set("+")
    outputFormat.set("javadoc") // Dokka's output format (alternative: 'html')
    debug.set(true) // Debug prints are disabled by default
    automaticDependencies.set(true)
}
*/

task sourceJar(type: Jar) {
  classifier "sources"
  from sourceSets.main.allJava
}

publishing {
    repositories {
        mavenLocal()
    }
    
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact tasks.sourceJar
        }
    }
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-+]*/
            }
            if (rejected) {
               selection.reject('Release candidate')
            }
        }
    }
}

// make sure that we report warnings to the user about deprecations and unchecked generics
gradle.projectsEvaluated {
  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
  }
}

// allow test classes to be referenced by dependent projects 
configurations {
    testArtifacts.extendsFrom testRuntime
}
task testJar(type: Jar) {
    classifier "test"
    from sourceSets.test.output
}
artifacts {
    testArtifacts testJar
}
