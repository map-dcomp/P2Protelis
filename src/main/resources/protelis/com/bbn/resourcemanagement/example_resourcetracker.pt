module com:bbn:resourcemanagement:resourcetracker

import com.bbn.protelis.networkresourcemanagement.ResourceReport.getShortEstimationWindow

import protelis:coord:accumulation
import protelis:coord:spreading
import protelis:coord:meta
import protelis:lang:utils
import protelis:coord:nonselfstabilizing:accumulation

// Deprecated --> will be replaced in a future Protelis release
def once(v) {
    rep(x <- v) { x }
}

public def countDevices(potential) {
    C(potential, sum, 1, 0)
}

// TODO: check if I can just do this as Tuple.union
public def union(a, b) {
    a.union(b)
}

public def C(potential, reduce, local, null) {
    let nonce = once(self.nextRandomDouble());
    rep (v <- local) {
        reduce.apply(local,
            /*
             * TODO: switch to accumulateHood
             */
            hood(
                (a, b) -> { reduce.apply(a, b) },
                // expression that will be evaluated if the field is empty
                null,
                mux (nbr(getParent(potential, (v) -> { nonce })) == nonce) {
                    nbr(v)
                } else { null }
            )
        )
    }
}

public def regionSet(potential) {
    C(potential, union, unionHood(nbr([self.getDevice().getRegionIdentifier()])), [])
}

def countNodes() {
    let nonce = once(self.nextRandomDouble());
    let leader = nonce == gossip(nonce, min);
    self.getExecutionEnvironment().put("blue",leader);
    let d = hopDistanceTo(leader);
    countDevices(d)
}

def nbrRegions() {
    let nonce = once(self.nextRandomDouble());
    let leader = nonce == gossip(nonce, min);
    //self.putEnvironmentVariable("blue",leader);
    let d = hopDistanceTo(leader);
    [leader, countDevices(d), regionSet(d)]
}

//countNodes();
//minHood(nbr(self.getDeviceUID()))
//nbrRegions();



let rgn = self.getDevice().getRegionIdentifier();
let s = multiRegion(rgn,(n) -> { rgn == n },countNodes,[]);
//multiRegion(rgn,(n) -> { rgn == n },nbrRegions,[]);
//multiRegion(rgn,(n) -> { rgn == n },() -> { [rgn, self.getDeviceUID()] },[]);

let report = self.getDevice().getResourceReport(getShortEstimationWindow()); 
let d = report.getComputeLoad();
let c = report.getNodeComputeCapacity();

[d,c,s]
