module com:bbn:resourcemanagement:resourcecounter

import java.lang.Double.POSITIVE_INFINITY

import protelis:coord:accumulation
import protelis:coord:spreading
import protelis:lang:utils
import protelis:coord:nonselfstabilizing:accumulation

def once(v) {
    rep(x <- v) { x }
}

def hopDistanceTo(leader) {
    rep(d <- POSITIVE_INFINITY) { mux(leader) { 0 } else { 1 + minHood(nbr(d)) } }
}

public def countDevices(potential) {
    C(potential, sum, 1, 0)
}
public def C(potential, reduce, local, null) {
    let nonce = once(self.nextRandomDouble());
    rep (v <- local) {
        reduce.apply(local,
            /*
             * TODO: switch to accumulateHood
             */
            hood(
                (a, b) -> { reduce.apply(a, b) },
                // expression that will be evaluated if the field is empty
                null,
                mux (nbr(getParent(potential, (v) -> { nonce })) == nonce) { 
                    nbr(v)
                } else { null }
            )
        )
    }
}

def countNodes() {
    let nonce = once(self.nextRandomDouble());
    let leader = nonce == gossip(nonce, min);
    //self.putEnvironmentVariable("blue",leader);
    let d = hopDistanceTo(leader);
    [leader, countDevices(d)]

}

countNodes()
