module com:bbn:processmanagement:rewindDummy

import java.lang.Math.min

import protelis:state:nonselfstabilizing:time

def findIncomingMatches(record,nbrBad) {
        let nbrUIDs = nbrBad.filter(self, (m) -> { !m.isIncoming() })
                .map(self, (m) -> { m.getContents() } );
        record.filter(self, (msg) -> { nbrUIDs.contains(msg.getContents()) } )
}

def addFollowingOutgoings(record,bad) {
        let badidx = bad.map(self, (b) -> { record.indexof(b) })
                .filter(self, (i) -> {i >= 0})
                .reduce(self, record.size(), (a,b) -> { min(a,b) });
        //self.putEnvironmentVariable("idx",badidx);
        record.subTupleEnd(badidx)
}

// What are the UIDs of neighbors owning incoming transitive?
def uidMatch(s1,s2) { 
        let s1id = s1.map(self, (m) -> { m.getContents() });
        let s2id = s2.map(self, (m) -> { m.getContents() });
        s1id.intersection(s2id).size() > 0
}
def nbrsOwning(incoming,transitive) {
        unionHood(mux(uidMatch(incoming,nbr(transitive))) { nbr([self.getId()]) } else { [] })
}

def stableFor(value, rounds) {
        rep(record <- [value,0]) {
                [value, if(record.get(0).equals(value)) { 1+record.get(1) } else { 1 }]
        }.get(1)>rounds
}

def incomingAlreadyDeleted(msg,deleted) {
        deleted.filter(self, (m)-> { m.isIncoming() && m.getContents()==msg.getContents() }).size()>0
}

// Attack injection kludge
let noButton = !self.hasEnvironmentVariable("Inject Attack");
let injection = self.getEnvironmentVariable("Inject Attack");
if(injection || noButton) { self.putEnvironmentVariable("attackMessages",self.getEnvironmentVariable("badMessages")) }
else { false };


let record = self.getEnvironmentVariable("messages");
let badness = self.getEnvironmentVariable("attackMessages",[]);
let deleted = self.getEnvironmentVariable("deletedMessages",[]);

// Identify every message that might have been affected by the bad message
let contaminated = 
        rep(transitiveBadness <- []) {
                let primary = badness;
                let nbrBad = unionHood(nbr(transitiveBadness));
                let incomingBad = findIncomingMatches(record,nbrBad);
                self.putEnvironmentVariable("logicalNeighbors",nbrsOwning(incomingBad,transitiveBadness));
                addFollowingOutgoings(record,incomingBad.union(primary))
        };

// Back out the contaminated messages, one by one
// What can be removed? Only the last contaminated element
// If it's incoming, it can be removed freely
// If it's outgoing, it can only be removed if the neighbor's incoming has been removed
let nbrDeletes = unionHood(nbr(deleted));
if(contaminated.size()>0) {
        let maybeRemovable = contaminated.get(contaminated.size()-1);
        let removable = (maybeRemovable.isIncoming() || incomingAlreadyDeleted(maybeRemovable,nbrDeletes));
        if(removable) {
                self.putEnvironmentVariable("deletedMessages",deleted.append(maybeRemovable));
                self.putEnvironmentVariable("messages",record.subTupleStart(record.size()-1))
        } else { 
                false
        }
} else { false };

// Note that this strategy can't trace all the way back to the origin, only to the
// point of incident.  It thus can't deal with persistent contamination e.g., a 
// bad message being re-delivered by a self-healing system

// Bad message records can be removed whenever the bad message is successfully deleted
self.putEnvironmentVariable("attackMessages",badness.intersection(contaminated).subtract(deleted));

// Let system progress anywhere that contamination is gone
let clean = contaminated.size()==0;
let nbrsClean = allHood(nbr(clean)); // Deletions are safe to discard when all neighbors are clean
if(!clean) {
        "pause process"
} else {
        if(nbrsClean) { self.putEnvironmentVariable("deletedMessages",[]) } else { false };
        "run process"
};

// Color self red if have badness, yellow if contaminated, green if all good
self.putEnvironmentVariable("red",contaminated.size()>0);
self.putEnvironmentVariable("green",badness.size()==0);

self.putEnvironmentVariable("timer",timeSinceStart());
self.putEnvironmentVariable("rounds",counter());


// Return the message set
record
